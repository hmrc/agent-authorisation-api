#%RAML 1.0
title: Agent Authorisation
version: 1.0
protocols: [ HTTPS ]
baseUri: https://api.service.hmrc.gov.uk/
mediaType: [ application/json, application/hal+json ]
description: An API allowing MTD-enabled Agents to request authorisation to a service for a client, instead of filling the 64-8 paper form.

documentation:
 - title: Overview
   content: !include docs/overview.md
 - title: Change Log
   content: !include docs/change-log.md
 - title: Why use this API?
   content: !include docs/why-use-this-api.md
 - title: Usage scenario
   content: !include docs/usage-scenario.md
 - title: Versioning
   content: !include https://developer.service.hmrc.gov.uk/api-documentation/assets/common/docs/versioning.md
 - title: Errors
   content: !include https://developer.service.hmrc.gov.uk/api-documentation/assets/common/docs/errors.md

uses:
  sec: https://developer.service.hmrc.gov.uk/api-documentation/assets/common/modules/securitySchemes.raml
  headers: https://developer.service.hmrc.gov.uk/api-documentation/assets/common/modules/headers.raml
  annotations: https://developer.service.hmrc.gov.uk/api-documentation/assets/common/modules/annotations.raml
  types: https://developer.service.hmrc.gov.uk/api-documentation/assets/common/modules/types.raml

traits:

  permissionOnAgencyRequired:
    responses:
      403:
        body:
          application/json:
            type: types.errorResponse
            examples:
              noPermissionOnAgency:
                description: The user that is signed in cannot access this authorisation request. Their details do not match the agent business that created the authorisation request.
                value:
                  code: NO_PERMISSION_ON_AGENCY
                  message: The user that is signed in cannot access this authorisation request. Their details do not match the agent business that created the authorisation request.

  mustBeAnAgent:
    responses:
      403:
        body:
          application/json:
            type: types.errorResponse
            examples:
              notAnAgent:
                description: This user does not have a Government Gateway agent account. They need to create an Government Gateway agent account before they can use this service.
                value:
                  code: NOT_AN_AGENT
                  message: This user does not have a Government Gateway agent account. They need to create an Government Gateway agent account before they can use this service.

  agentSubscriptionRequired:
    responses:
      403:
        body:
          application/json:
            type: types.errorResponse
            examples:
              agentNotSubscribed:
                description: This agent needs to create an agent services account before they can use this service.
                value:
                  code: AGENT_NOT_SUBSCRIBED
                  message: This agent needs to create an agent services account before they can use this service.

  clientRegistrationRequired:
    responses:
      403:
        body:
          application/json:
            type: types.errorResponse
            examples:
              clientRegistrationNotFound:
                description: The details provided for this client do not match HMRC's records.
                value:
                  code: CLIENT_REGISTRATION_NOT_FOUND
                  message: The details provided for this client do not match HMRC's records.

  invitationMustHaveValidStatus:
    responses:
      403:
        body:
          application/json:
            type: types.errorResponse
            examples:
              invalidInvitationStatus:
                description: This authorisation request cannot be cancelled as the client has already responded to the request, or the request has expired.
                value:
                  code: INVALID_INVITATION_STATUS
                  message: This authorisation request cannot be cancelled as the client has already responded to the request, or the request has expired.

  invitationMustHaveSupportedClientType:
    responses:
      400:
        body:
          application/json:
            type: types.errorResponse
            examples:
              invalidInvitationStatus:
                description: The client type requested is not supported. Check the API documentation to find which client types are supported.
                value:
                  code: CLIENT_TYPE_NOT_SUPPORTED
                  message: The client type requested is not supported. Check the API documentation to find which client types are supported.

  invitationSpecified:
    responses:
      404:
        body:
          application/json:
            type: types.errorResponse
            examples:
              invitationNotFound:
                description: The authorisation request cannot be found.
                value:
                  code: INVITATION_NOT_FOUND
                  message: The authorisation request cannot be found.

  serviceSpecified:
      responses:
        400:
          body:
            application/json:
              type: types.errorResponse
              examples:
                invitationNotFound:
                  description: The service requested is not supported. Check the API documentation to find which services are supported.
                  value:
                    code: SERVICE_NOT_SUPPORTED
                    message: The service requested is not supported. Check the API documentation to find which services are supported.

  validatePayload:
        responses:
          400:
            body:
              application/json:
                type: types.errorResponse
                examples:
                  invitationNotFound:
                    description: The payload is invalid.
                    value:
                      code: INVALID_PAYLOAD
                      message: The payload is invalid.


  clientIdSpecified:
    responses:
        400:
          body:
            application/json:
              type: types.errorResponse
              examples:
                invalidClientId:
                  description: Client identifier must be in the correct format. Check the API documentation to find the correct format.
                  value:
                    code: CLIENT_ID_FORMAT_INVALID
                    message: Client identifier must be in the correct format. Check the API documentation to find the correct format.
                clientIdMatchesService:
                  description: The type of client Identifier provided cannot be used with the requested service. Check the API documentation for details of the correct client identifiers to use.
                  value:
                    code: CLIENT_ID_DOES_NOT_MATCH_SERVICE
                    message: The type of client Identifier provided cannot be used with the requested service. Check the API documentation for details of the correct client identifiers to use.
                invalidPostcode:
                  description: Postcode must be in the correct format. Check the API documentation to find the correct format.
                  value:
                    code: POSTCODE_FORMAT_INVALID
                    message: Postcode must be in the correct format. Check the API documentation to find the correct format.
                invalidVatRegistrationDate:
                  description: VAT registration date must be in the correct format. Check the API documentation to find the correct format.
                  value:
                    code: VAT_REG_DATE_FORMAT_INVALID
                    message: VAT registration date must be in the correct format. Check the API documentation to find the correct format.

  knownFactMatches:
    responses:
        403:
          body:
            application/json:
              type: types.errorResponse
              examples:
                postcodeDoesNotMatch:
                  description: The postcode provided does not match HMRC's record for the client.
                  value:
                    code: POSTCODE_DOES_NOT_MATCH
                    message: The postcode provided does not match HMRC's record for the client.
                vatRegistrationDateDoesNotMatch:
                  description: The VAT registration date provided does not match HMRC's record for the client.
                  value:
                    code: VAT_REG_DATE_DOES_NOT_MATCH
                    message: The VAT registration date provided does not match HMRC's record for the client.

  pendingAuthorisationExists:
    responses:
            403:
              body:
                application/json:
                  type: types.errorResponse
                  examples:
                    duplicateAuthorisationRequest:
                      description: A pending invitation already exists between the agent and client for this service.
                      value:
                        code: DUPLICATE_AUTHORISATION_REQUEST
                        message: An authorisation request for this service has already been created and is awaiting the clientâ€™s response.

  activeAuthorisationExists:
      responses:
              403:
                body:
                  application/json:
                    type: types.errorResponse
                    examples:
                      alreadyAuthorised:
                        description: An active relationship already exists between the agent and client for this service.
                        value:
                          code: ALREADY_AUTHORISED
                          message: The client has already authorised the agent for this service. The agent does not need ask the client for this authorisation again.

  relationshipNotFound:
    responses:
      404:
        body:
          application/json:
            type: types.errorResponse
            examples:
              notfoundrelationship:
                description: Relationship is inactive. Agent is not authorised to act for this client.
                value:
                  code: RELATIONSHIP_NOT_FOUND
                  message: Relationship is inactive. Agent is not authorised to act for this client.

  headerErrors:
    responses:
      400:
        body:
          application/json:
            type: types.errorResponse
            examples:
              badRequestUnsupportedVersion:
                  description: Missing or unsupported version found in 'Accept' header.
                  value:
                    code: BAD_REQUEST
                    message: Missing or unsupported version number
              badRequestUnsupportedContentType:
                  description: Missing or unsupported found in 'Accept' header.
                  value:
                    code: BAD_REQUEST
                    message: Missing or unsupported content-type.
      406:
        body:
          application/json:
            type: types.errorResponse
            examples:
              acceptHeaderMissing:
                description: Missing 'Accept' header.
                value:
                  code: ACCEPT_HEADER_INVALID
                  message: Missing 'Accept' header.
              acceptHeaderInvalid:
                  description: Invalid 'Accept' header.
                  value:
                    code: ACCEPT_HEADER_INVALID
                    message: Invalid 'Accept' header

  standardErrors:
    responses:
      400:
         body:
          application/json:
            type: types.errorResponse
            examples:
              badRequest:
                  description: Bad Request
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
      401:
         body:
          application/json:
            type: types.errorResponse
            examples:
              unauthorizedRequest:
                  description: Bearer token is missing or not authorized.
                  value:
                    code: UNAUTHORIZED
                    message: Bearer token is missing or not authorized.
      500:
         body:
          application/json:
            type: types.errorResponse
            examples:
              internalServerRequest:
                  description: INTERNAL_SERVER_ERROR
                  value:
                    code: INTERNAL_SERVER_ERROR
                    message: Internal server error.

/agents/{arn}:
  /invitations:
    is: [headers.acceptHeader, mustBeAnAgent, agentSubscriptionRequired, permissionOnAgencyRequired, headerErrors, standardErrors]
    uriParameters:
      arn:
        description: !include docs/arn_see_here.md
        type: string
        example: AARN9999999
    post:
      is: [serviceSpecified, invitationMustHaveSupportedClientType, clientIdSpecified, clientRegistrationRequired, knownFactMatches, pendingAuthorisationExists, activeAuthorisationExists, validatePayload]
      displayName: Create a new authorisation
      (annotations.scope): "write:sent-invitations"
      securedBy: [ sec.oauth_2_0: { scopes: [ "write:sent-invitations" ] } ]
      body:
          application/json:
            description: Create a new authorisation request. The request will expire after 21 days.
            type: !include schemas/create-invitation.json
            examples:
              example-1:
                value: !include examples/post-agency-invitations-example.json
              example-2:
                value: !include examples/post-agency-invitations-vat-example.json

      responses:
        204:
          description: The authorisation request was created successfully.
          headers:
            Location:
              example: /agents/AARN9999999/invitations/CS5AK7O8FPC43
              description: Location of the authorisation request.

    get:
      displayName: Get all authorisation requests for the last 30 days
      (annotations.scope): "read:sent-invitations"
      securedBy: [ sec.oauth_2_0: { scopes: [ "read:sent-invitations" ] } ]

      responses:
        200:
          body:
            application/json:
              description: Returns all authorisation requests for the last 30 days.
              type: !include schemas/invitations.json
              examples:
                pending and responded: !include examples/get-agency-invitations-example.json

        204:
          description: The agent has no authorisation requests for the last 30 days.

    /{invitationId}:
      is: [headers.acceptHeader, mustBeAnAgent, agentSubscriptionRequired, permissionOnAgencyRequired, invitationSpecified, headerErrors, standardErrors]
      uriParameters:
        invitationId:
          description: A unique authorisation request ID
          type: string
          example: CS5AK7O8FPC43
      get:
        displayName: Get an invitation by id
        (annotations.scope): "read:sent-invitations"
        securedBy: [ sec.oauth_2_0: { scopes: [ "read:sent-invitations" ] } ]
        responses:
          200:
            body:
              application/json:
                description: Returns the authorisation request.
                type: !include schemas/invitation.json
                examples:
                  pending: !include examples/get-agency-invitation-pending-example.json
                  responded: !include examples/get-agency-invitation-responded-example.json
      delete:
        is: [invitationMustHaveValidStatus]
        displayName: Cancel an invitation by id
        (annotations.scope): "write:cancel-invitations"
        securedBy: [ sec.oauth_2_0: { scopes: [ "write:cancel-invitations" ] } ]
        responses:
          204:
            description: The authorisation request has been cancelled successfully.

  /relationships:
    is: [headers.acceptHeader, clientRegistrationRequired, knownFactMatches, mustBeAnAgent, agentSubscriptionRequired, permissionOnAgencyRequired, relationshipNotFound, serviceSpecified, clientIdSpecified, headerErrors, standardErrors]
    uriParameters:
      arn:
        description: !include docs/arn_see_here.md
        type: string
        example: AARN9999999
    post:
      displayName: Get Status of a Relationship
      (annotations.scope): "read:check-relationship"
      securedBy: [ sec.oauth_2_0: { scopes: [ "read:check-relationship" ] } ]
      body:
        application/json:
          description: Check Relationship based on the details received.
          type: !include schemas/check-relationship.json
          examples:
            example-1:
              value: !include examples/post-agency-check-relationship-itsa-example.json
            example-2:
              value: !include examples/post-agency-check-relationship-vat-example.json
      responses:
        204:
          description: Relationship is active. Agent is authorised to act for the client.
